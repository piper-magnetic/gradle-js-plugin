plugins {
    id "com.gradle.plugin-publish" version "0.18.0"

    id "groovy"
    id "maven-publish"
    id "signing"
    id "project-report"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

defaultTasks 'clean', 'build'

version = '3.3.1.NASHORN'
group = 'com.magnetichq'
ext.archivesBaseName = 'gradle-7-js-plugin'
ext.isSnapshot = version.endsWith("-SNAPSHOT")

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

repositories {
    jcenter()
}

task createClasspathManifest {
    def outputDir = sourceSets.test.output.resourcesDir

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

dependencies {
    implementation gradleApi()
    implementation('com.google.javascript:closure-compiler:v20160208') {
        exclude module: 'junit'
    }
    implementation('io.jdev.html2js:html2js:0.1') {
        exclude module: 'groovy-all'
    }
    testImplementation gradleTestKit()
    testImplementation files(createClasspathManifest)
    testImplementation('org.spockframework:spock-core:2.0-groovy-3.0') {
        exclude module: 'junit-dep'
        exclude module: 'groovy-all'
    }
    testImplementation 'commons-lang:commons-lang:2.6'
    testImplementation 'junit:junit:4.13'
}

compileGroovy {
    options.compilerArgs = ['-Xlint:deprecation', '-Xlint:unchecked']
}

task sourceJar(type: Jar) {
    description = 'An archive of the source code for Maven Central'
    classifier = 'sources'
    from sourceSets.main.groovy
}

task groovydocJar(type: Jar) {
    description = 'An archive of the GroovyDocs for Maven Central'
    classifier = 'javadoc'
    from groovydoc
}

artifacts {
    archives groovydocJar, sourceJar
}

publishing {
    publications {
        maven(MavenPublication) {
            if (plugins.hasPlugin('war')) {
                from components.web
            } else {
                from components.java
            }

            artifact sourceJar {
                classifier 'sources'
            }

            artifact groovydocJar {
                classifier 'javadoc'
            }
        }
    }
}

pluginBundle {
    website = 'https://github.com/piper-magnetic/gradle-js-plugin/'
    vcsUrl = 'https://github.com/piper-magnetic/gradle-js-plugin/'
    description = 'Gradle 7.0 plugin for working with JS'
    tags = ['javascript', 'jshint', 'requirejs']

    plugins {
        jsPlugin {
            id = 'com.magnetichq.gradle.js'
            displayName = 'Gradle7 JavaScript Plugin'
        }
    }
    mavenCoordinates {
        groupId = 'com.magnetichq'
        artifactId = 'gradle-7-js-plugin'
    }
}

signing {
    sign configurations.archives
}

test {
    systemProperties['version'] = version
    testLogging {
        stackTraceFilters 'truncate', 'groovy'
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }
    useJUnitPlatform()
}

// Only *require* signing if we are uploading a non snapshot version
gradle.taskGraph.whenReady { taskGraph ->
    tasks.withType(org.gradle.plugins.signing.Sign).all {
        required = taskGraph.hasTask(":uploadArchives") && !isSnapshot
    }
}

/**
 * Create POM config and return for use by other tasks.
 */
def getPomConfiguration() {
    return {
        name 'Gradle7.0 JS Plugin'
        packaging 'jar'
        description 'A Gradle plugin for working with JS, upgraded for 7.0.'
        url 'https://github.com/piper-magnetic/gradle-js-plugin'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'piper-magnetic'
                name 'Piper Horscroft'
                email 'david@magnetichq.com'
            }
        }
        scm {
            connection 'scm:https://piper-magnetic@github.com/piper-magnetic/gradle-js-plugin'
            developerConnection 'scm:git@github.com:piper-magnetic/gradle-js-plugin.git'
            url 'https://github.com/piper-magnetic/gradle-js-plugin'
        }
    }
}

// download dependencies all at once, keeps downloads out of travis output
task resolveAllDependencies {
    doLast {
        configurations.all { it.resolve() }
    }
}
